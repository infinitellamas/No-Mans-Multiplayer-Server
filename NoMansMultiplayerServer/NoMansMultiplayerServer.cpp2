// NoMansMultiplayerServer.cpp : Defines the entry point for the console application.
// base off of http://thisthread.blogspot.com.au/2011/02/minimal-asio-tcp-server.html
#include <string>
#include <iostream>
#include <vector>
#include <thread>
#include <mutex>

#include <zmq.hpp>
#include <json/json.h>

#include "PlayerData.h"

std::vector<PlayerData> players;
std::mutex mtx;
static int nextID = 1;

void playerCleanup() {
	while (true) {
		std::chrono::milliseconds currentTime = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch());
		mtx.lock(); //lock while we are cleaning out players
		int iter = 0;
		players;
		while (iter < players.size()) {
			if (players.at(iter).lastResponseTime.count() + 10000 < currentTime.count()) {
				std::cout << players.at(iter).getName() << " has left the server" << std::endl;
				players.erase(players.begin() + iter);
			}
			else if (players.at(iter).lastResponseTime.count() + 5000 < currentTime.count()) {
				std::cout << players.at(iter).getName() << " is timing out..." << std::endl;
				iter++;
			}
			else {
				iter++;
			}
		}
		mtx.unlock();
		Sleep(1000);
	}
}



/*###################################################################################################*/
//											MAIN FUNC HERE
/*###################################################################################################*/
int main(int argc, char *argv[]){
	try
	{
		//std::thread cleanupThread = std::thread(playerCleanup);


		std::cout << "---------------------------------" << std::endl;
		std::cout << "-- No Man's Multiplayer Server --" << std::endl;
		std::cout << "------- By InfiniteLlamas -------" << std::endl;
		std::cout << "---------------------------------" << std::endl;
		std::cout << "---- Press Ctrl + C to close ----" << std::endl;
		std::cout << "---------------------------------" << std::endl;
		std::cout << "Initialising socket on tcp://192.168.0.16:5258" << std::endl;
		zmq::context_t context(1);
		zmq::socket_t socket(context, ZMQ_REP);
		//socket.setsockopt(ZMQ_RCVTIMEO, 1000);  //So if a client does some shit we are ok
		//socket.setsockopt(ZMQ_SNDTIMEO, 1000);
		//socket.setsockopt(ZMQ_LINGER, 0);
		socket.bind("tcp://127.0.0.1:5258");
		std::cout << "Server Ready - Waiting for connections" << std::endl;
		while (true) {
			zmq::message_t incoming;
			socket.recv(&incoming);
				PlayerData current;
				bool parseResult = PlayerData::fromJSONString(&current, (char*)incoming.data());
				if (parseResult) { //PlayerData that was sent was valid
					if (current.getId() == 0) { //If we have a ew player connecting!
						current.setId(nextID); // Give that player an ID
						nextID++;
						// Notify the server window that a new player has connected
						std::cout << current.getName() << "(ID=" << current.getId() << ") connected from " << current.getRegion() << std::endl;

						current.lastResponseTime = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()); // Record their last update time. we use this to decide whether they have disconnected
						mtx.lock();
						players.push_back(current); // keep track of said player
						mtx.unlock();
					}
					else { //We have already seen this player before
						mtx.lock();
						for (std::vector<PlayerData>::iterator iter = players.begin(); iter != players.end(); iter++) { //Update their server-side values
							if (current.getId() == iter->getId()) {

								if (current.getName() != iter->getName()) {
									std::cout << iter->getName() << " changed their name to " << current.getName() << std::endl;
								}

								if (current.getRegion() != iter->getRegion()) {
									std::cout << iter->getName() << " travelled to " << current.getRegion() << std::endl;
								}
								current.lastResponseTime = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()); // Record their last update time. we use this to decide whether they have disconnected

								*iter = current; // copy new values (like new name, new position etc...)
							}
						}
						mtx.unlock();
					}

					// Craft a json response
					Json::Reader reader;
					Json::Value jResponse;

					// Put the current player into json object
					Json::Value you;
					reader.parse(current.getJSONString().c_str(), you);
					jResponse["you"] = you;

					// For each player that is not the current player
					jResponse["others"] = Json::Value(Json::arrayValue);
					mtx.lock();
					for (std::vector<PlayerData>::iterator iter = players.begin(); iter != players.end(); iter++) {
						if (current.getId() != iter->getId()) {
							// Parse their data into a json object.
							Json::Value otherPlayer;
							reader.parse(iter->getJSONString(), otherPlayer);
							jResponse["others"].append(otherPlayer);
						}
					}
					mtx.unlock();
					// Craft the message
					std::string outgoingString = jResponse.toStyledString();
					zmq::message_t outgoing(outgoingString.size());
					memcpy(outgoing.data(), outgoingString.c_str(), outgoingString.size());
					socket.send(outgoing);
				}
				else {
					std::cout << "Someone sent an invalid response of:" << std::endl;
					std::cout << current.getJSONString() << std::endl;

					//Tell the client their data was nil. Probably not needed but zmq requires a reponse so this is it
					Json::Value jResponse;
					jResponse["nil"] = 1;
					std::string outgoingString = jResponse.toStyledString();
					zmq::message_t outgoing(outgoingString.size());
					memcpy(outgoing.data(), outgoingString.c_str(), outgoingString.size());
					socket.send(outgoing);
				}
			
		}
	}
	catch (std::exception& e) // 6
	{
		std::cerr << "Exception: " << e.what() << std::endl;
		system("PAUSE");
	}
	int k = 1;
	return 0;
}

